= Introducción a las aplicaciones web progresivas
:icons: font
:twitter-tag: UDE
:conference-tag:
:talk-tag: Intro PWA
:linkattrs:

include::footer.ad[]

[NOTE.speaker]
====

Contenido de la presentación:

* ¿Qué son las aplicaciones web progresivas?
* ¿Cuál es la arquitectura recomendada para aplicaciones Android?
* Lifecycle-aware
* Live Data
* Room

====

== !
image::jetpack-hero.svg[background, size=auto]

== ¿Qué son los componentes de arquitectura?

Son una colección de librerías con el objetivo de ayudar al desarrollador a diseñar aplicaciones robustas, testeables y mantenibles. Es parte del proyecto Jetpack.

== Complejidad de las aplicaciones Android

A diferencia de las aplicaciones de escritorio que poseen normalmente uno solo punto de entrada, las aplicaciones Android tienen muchos componentes como Activities, Fragmentos, Services, Content Providers y Broadcast Receivers.

== Compartir una foto en una red social

1.- La aplicación invoca un Intent de la cámara. El SO invoca la cámara y la aplicación de la red social queda en segundo plano.

2.- La cámara puede invocar otros Intents como por ejemplo la selección de archivos.

3.- Eventualmente la aplicación regresa a la aplicación de la red social.

== Pero ...

== El proceso puede ser interrumpido por:

* Una llamada
* Una notificación.

El usuario espera que luego de la interrupción la aplicación continúe donde quedo.

**Este flujo debe ser manejado correctamente**

== Además

== Las aplicaciones se ejecutan en dispositivos móviles

* Con recursos limitados
* La aplicación puede ser detenida en cualquier momento (usuario o SO que requiere memoria para ejecutar otra)

**Por ello no se debe almacenar datos de la aplicación o estado en los componentes de la aplicación**

== ¿Cuál es la arquitectura recomendada para aplicaciones Android?

1. Separación de intereses (Separation of Concerns SoC)

2. Manejar la UI desde el modelo

== Separación de intereses

Si bien es común caer en el error de escribir todo el código en las Activities o Fragmentos, la idea de este principio es que estás clases solo tengan lógica de UI y eventos del sistema operativo.

**Si mantenemos estas clases lo más ligeras posibles nos evitaran problemas de manejo de ciclo de vida de los componentes.**

[NOTE.speaker]
====
Se debe considerar que no somos dueños de las implementaciones que hagamos de las Activities o los Fragmentos, estas solo actúan como contratos entre el SO y nuestra aplicación. El SO puedes destruirlas en cualquier momento debido a interacciones del usuario o condiciones de baja memoria. Por ello, para proveer una buena experiencia al usuario y asegurar el mantenimiento de la aplicación es mejor minimizar las dependencia a ellas.
====

== Manejar la UI desde el modelo

* Es importante que la UI se maneje a partir del modelo (Persistente).
* Los modelos son los encargados de manejar los datos de la aplicación.
* Los modelos deben ser independientes de las vistas y de los componentes de la aplicación (No son afectados por el ciclo de vida de la aplicación).

== Razones de un Modelo Persistente

* Para que  los usuarios no pierdan datos cuando el SO destruya la aplicación o libere recursos.
* Para que la aplicación continué trabajando cuando la conexión de red es inestable o no esta disponible.

**Diseñar la aplicación usando clases que tengan responsabilidades definidas para la administración de los datos, la hace más testeable y consistente.**

== Arquitectura recomendada

image::final-architecture.png[background, size=auto]

[NOTE.speaker]
====
Se debe considerar que no hay una arquitectura que se aplique para todos los casos, se sugiere esta arquitectura para iniciar los proyectos. Pero, arquitecturas diferentes pueden aplicar si siguen los mismos principios recomendados (Separación de intereses, Manejar la UI a partir del Modelo).
====

== ViewModel

**ViewModel** proporciona los datos para un componente específico de la UI (Activities/Fragmentos). Contiene la lógica de negocio de manejo de datos para comunicarse con el modelo.

[NOTE.speaker]
====
Por ejemplo, ViewModel puede llamar a otros componentes para cargar los datos, y puede reenviar las solicitudes de los usuarios para modificar los datos. ViewModel no conoce los componentes de la interfaz de usuario, por lo que no se ve afectado por los cambios de configuración, como la recreación de una actividad al rotar el dispositivo.
====

== LiveData

**LiveData** es un objeto que monitorea (observa) cambios a nivel de datos. Los componentes de la aplicación pueden usarlo para monitorear cambios en los objetos sin crear dependencias explícitas y rígidas entre ellos.

[NOTE.speaker]
====
 El componente LiveData también respeta el estado y ciclo de vida de los componentes de su aplicación (Activities, Fragmentos, Services), e incluye lógica de limpieza para evitar fugas de objetos y consumo excesivo de memoria.
====

== Room

**Room** es una librería de mapeo de objetos que proporciona persistencia de datos locales con un mínimo código repetitivo. En el momento de la compilación, valida cada consulta con respecto a su esquema de datos, por lo que las consultas SQL con problemas son detectadas en tiempo de compilación en lugar de fallas en el tiempo de ejecución.

[NOTE.speaker]
====
Room abstrae los detalles de implementación asociados al trabajo con consultas y tablas SQL.
Room permite observar cambios en los datos de la base de datos, incluidas las colecciones y consultas join, exponiendo dichos cambios utilizando objetos LiveData. Maneja explícitamente restricciones de ejecución de threads, por ejemplo acceder al almacenamiento en el thread principal.
====

== Mejores prácticas

* Evitar designar los entrypoint de su aplicación (Activities, Services, Broadcast Receivers), como fuentes de datos.
* Crear límites de responsabilidad entre los módulos de la aplicación.
* Exponer lo mínimo posible de cada módulo.
* Considerar que cada componente se pueda probar por si solo.

== Mejores prácticas

* Focus on the unique core of your app so it stands out from other apps.
* Persist as much relevant and fresh data as possible.
* Assign one data source to be the single source of truth.

include::self.ad[]
